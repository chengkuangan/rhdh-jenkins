apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: quarkus-jenkins-demo-template
  title: Quarkus Rest API App Backend with Jenkins Showcase 
  description: Creates Quarkus Rest API App Backend
  tags:
    - java
    - quarkus
    - maven
    - jenkins
    - showcase
spec:
  owner: chengkuangan
  type: service

  parameters:
    - title: Provide information about the GitLab location
      required:
        - gitlabGroup
      properties:
        gitlabGroup:
          title: Repo Owner
          type: string
          description: GitLab Organization
          default: demo
          # enum:
          #   - demo
        gitlabProject:
          title: Project Name
          type: string
          description: GitLab Project or Repo Name
          default: quarkus-api-jenkins-backend
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
          default: Creates the Quarkus Rest API app with Jenkins integration
  steps:
    - id: templateSource
      name: Generating the source code component
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: ./source
        values:
          git_host: gitlab.apps.sno.ocp.internal
          gitlabGroup: ${{parameters.gitlabGroup}}
          repoName: ${{parameters.gitlabProject}}
          owner: ${{user.entity.metadata.name}}
          cluster_id: .gitlab.apps.sno.ocp.internal
          # namespace: ${{parameters.namespace}}
          # component_id: ${{parameters.namespace}}-${{parameters.gitlabProject}}-backend-app
          component_id: ${{parameters.gitlabGroup}}-${{parameters.gitlabProject}}-backend-app
    - id: publishSource
      name: Publishing to Source Code Repository
      action: publish:gitlab
      input:
        sourcePath: ./source
        description: ${{parameters.description}}
        repoUrl: gitlab.apps.sno.ocp.internal?owner=${{parameters.gitlabGroup}}&repo=${{parameters.gitlabProject}}
        defaultBranch: main
        protectDefaultBranch: false
        repoVisibility: public
    - id: registerSource
      name: Registering the Source Code Component
      action: catalog:register
      input:
        repoContentsUrl: ${{steps.publishSource.output.repoContentsUrl}}
        catalogInfoPath: /catalog-info.yaml
  output:
    links:
      - title: Source Code Repository
        url: ${{steps.publishSource.output.remoteUrl}}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{steps.registerSource.output.entityRef}}

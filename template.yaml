apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: jenkins-template
  title: Quarkus Backend with Jenkins Demo 
  description: Creates Quarkus backend with Jenkins integration
  tags:
    - java
    - quarkus
    - maven
    - jenkins
    - demo
spec:
  owner: ganck
  type: service

  parameters:
    - title: Provide information about the GitLab location
      required:
        - gitlabGroup
      properties:
        gitlabServer:
          title: GitLab Server
          type: string
          description: GitLab Server
          # default: gitlab.apps.sno.ocp.internal
          default: gitlab-gitlab.apps.sno.ocp.internal
        gitlabGroup:
          title: Repo Owner
          type: string
          description: GitLab Organization
          default: demo
        gitlabProject:
          title: Project Name
          type: string
          description: GitLab Project or Repo Name
          default: quarkus-api-backend
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
          default: Creates the Quarkus Rest API backend with Jenkins integration
    # - title: Provide information about Jenkins Server
    #   required:
    #     - jenkinsServer
    #     - jenkinsUser
    #     - jenkinsToken
    #   properties:
    #     jenkinsServer:
    #       title: URL
    #       type: string
    #       description: Complete Jenkins Server URL
    #       default: https://192.168.0.151:8080
    #     jenkinsUser:
    #       title: Username
    #       type: string
    #       description: Jenkins Username
    #       default: admin
    #     jenkinsToken:
    #       title: Token
    #       type: string
    #       description: Jenkins API Token
    #       default: 11a85f4465a148f3a9d9e576a59a517c57
  steps:
    - id: templateSource
      name: Generating the source code component
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: ./source
        values:
          git_host: ${{ parameters.gitlabServer }}
          gitlabGroup: ${{parameters.gitlabGroup}}
          repoName: ${{parameters.gitlabProject}}
          owner: ${{user.entity.metadata.name}}
          # ocp_app_domain: .apps.cluster-zrd5j.zrd5j.sandbox2112.opentlc.com
          ocp_app_domain: .apps.sno.ocp.internal
          # namespace: ${{parameters.namespace}}
          # component_id: ${{parameters.namespace}}-${{parameters.gitlabProject}}-backend-app
          component_id: ${{parameters.gitlabGroup}}-${{parameters.gitlabProject}}
    # - id: create-jenkins-job
    #   name: Create Jenkins Job
    #   action: scaffolder:execute-shell-command
    #   input:
    #     shell: |
    #       #!/bin/bash
    #       JENKINS_URL="${{ parameters.jenkinsServer }}"
    #       JENKINS_USER="${{ parameters.jenkinsUser }}"
    #       JENKINS_TOKEN="${{ parameters.jenkinsToken }}"
    #       JOB_NAME="${{ parameters.gitlabProject }}"
    #       REPO_URL="${{ parameters.gitlabServer }}?owner=${{parameters.gitlabGroup}}&repo=${{parameters.gitlabProject}}"

    #       # Generate the Jenkins job XML configuration
    #       cat <<EOF > config.xml
    #       <flow-definition plugin="workflow-job">
    #         <description>${{ parameters.description }}</description>
    #         <keepDependencies>false</keepDependencies>
    #         <properties/>
    #         <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps">
    #           <scm class="hudson.plugins.git.GitSCM" plugin="git">
    #             <configVersion>2</configVersion>
    #             <userRemoteConfigs>
    #               <hudson.plugins.git.UserRemoteConfig>
    #                 <url>\${REPO_URL}</url>
    #               </hudson.plugins.git.UserRemoteConfig>
    #             </userRemoteConfigs>
    #             <branches>
    #               <hudson.plugins.git.BranchSpec>
    #                 <name>*/main</name>
    #               </hudson.plugins.git.BranchSpec>
    #             </branches>
    #           </scm>
    #           <scriptPath>Jenkinsfile</scriptPath>
    #           <lightweight>true</lightweight>
    #         </definition>
    #         <triggers/>
    #       </flow-definition>
    #       EOF

    #       # Use Jenkins API to create the pipeline job
    #       curl -X POST \
    #         -u "\${JENKINS_USER}:\${JENKINS_TOKEN}" \
    #         -H "Content-Type: application/xml" \
    #         -d @config.xml \
    #         "\${JENKINS_URL}/createItem?name=\${JOB_NAME}"
    - id: publishSource
      name: Publishing to Source Code Repository
      action: publish:gitlab
      input:
        sourcePath: ./source
        description: ${{parameters.description}}
        repoUrl: ${{ parameters.gitlabServer }}?owner=${{parameters.gitlabGroup}}&repo=${{parameters.gitlabProject}}
        defaultBranch: main
        protectDefaultBranch: false
        repoVisibility: public
    - id: registerSource
      name: Registering the Source Code Component
      action: catalog:register
      input:
        repoContentsUrl: ${{steps.publishSource.output.repoContentsUrl}}
        catalogInfoPath: /catalog-info.yaml
  output:
    links:
      - title: Source Code Repository
        url: ${{steps.publishSource.output.remoteUrl}}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{steps.registerSource.output.entityRef}}
